[[config_api]]
== Configuration API

The configuration API provides a central place for modules to store
configuration data. This can be simple configuration like your site name, or
more complex information managed with configuration entities, such as views and
content types.

[[config_info_types]]
=== Overview of Configuration (vs. other types of information)

In Drupal 8, there are several types of information:

Content::
    Information meant to be displayed on your site: article, basic page, images,
    files, etc.
Session::
    Information about individual users' interactions with the site, such as
    whether they are logged in. This is really "state" information, but it is
    not stored the same way so it's a separate type here.
State::
    Information of a temporary nature about the current state of your
    site. Examples: the time when Cron was last run, whether node access
    permissions need rebuilding, etc. See <<state_api>> for details of how
    to store this information.
Configuration::
    Information about your site that is not content and is meant to be more
    permanent, such as the name of your site, the content types and views you
    have defined, etc.

[[classifying_information]]
==== Deciding how to classify your information

It is not always clear how to decide whether a piece of information that your
module will store should be classified as content, state, or configuration. Here
are some guidelines:

Configuration vs. State::
   If your information would need to be deployed from your development server to
   your live server, it is probably configuration and not state information.
Configuration vs. Content::
   Think site builder vs. site editor. If a "site editor" role on the site would
   want to edit the information, it is probably content. If only a "site
   builder" role would want to have the power to edit the information, then it
   is probably configuration. But this is not an absolute rule.
Configuration vs. Content::
   Think about numbers. If you have a huge number of items, probably it is
   content. If you will only ever have a few, probably it is configuration.
Configuration vs. Content::
   Configuration tends to define "types of things", such as content types,
   taxonomy vocabularies, etc. Then each "thing" within the type is a piece of
   content: a content node, a taxonomy term, etc.

[[simple_config_vs_entity]]
==== Simple Configuration vs. Configuration Entities

There are two overall types of configuration information. Simple configuration
is used for single, global settings, such as the name of your
site. Configuration entities are used for pieces of information that have
multiple copies; for example, views, content types, etc.

[[config_storage]]
=== Configuration Storage

Configuration information is stored in files and in the database.

[[config_yml]]
==== Configuration File Format (YAML)

All configuration data is stored on-disk using YAML files.

Here is an example of a configuration file:

----
some_string: 'Woo kittens!'
some_int: 42
some_bool: true
----

Configuration can also be nested. Here is an example:

----
name: thumbnail
label: 'Thumbnail (100x100)'
effects:
  1cfec298-8620-4749-b100-ccb6c4500779:
    id: image_scale
    data:
      width: 100
      height: 100
      upscale: true
    weight: 0
    uuid: 1cfec298-8620-4749-b100-ccb6c4500779
----

See <<config_schema>> for information on the schema for configuration files.

[[config_file_location]]
==== Configuration File Location for a Site

By default, when you install Drupal, the installer will create a randomly-named
directory inside your public files directory for configuration. The name will
start with 'config_', followed by a random hash string. Within this directory,
the installer will create an 'active' directory for your current live
configuration, and a 'staging' directory for configuration you are importing.

You can change the locations of your staging and active directories by editing
your settings.php file.

[[default_config]]
==== Default Configuration for a Module

A module that provides default values for its configuration must put that
configuration into YAML files in its 'config' sub-directory.

If the module only needs basic Simple Configuration settings, all of the default
configuration could go into one modulename.settings.yaml file. For more complex
settings, you can separate your configuration into multiple files. Configuration
Entities must each be put into their own YAML files, and they should be
generated by having the module write out its configuration (don't try writing
them by hand).

[[config_cache]]
==== Configuration Caching in the Database

The canonical storage for configuration for a site is the files in the 'active'
configuration directory defined in settings.php. However, by default, Drupal
caches the current configuration in the database in the {cache_config} database
table. (Of course, you can override Drupal's default cache system.)

[[config_schema]]
=== Configuration Schema and Meta-Data

The configuration API includes support for a Kwalify
http://www.kuwata-lab.com/kwalify/[Kwalify]-inspired schema/metadata language
for configuration YAML files. Kwalify itself is written in Python and we needed
slight adjustments in the format, so not all of the details of Kwalify are
directly applicable, but it is pretty close.

@todo Put the rest of https://drupal.org/node/1905070 here.

[[config_tmp]]
=== Rest of Configuration API information

@todo Put the rest of the Config API section from
https://drupal.org/node/1667894 here.
and update the title and identifier for this section.
